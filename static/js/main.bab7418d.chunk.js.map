{"version":3,"sources":["services/history.js","theme/light.js","breakpoints/BreakPoints.js","breakpoints/RespondTo.js","GlobalStyle.js","components/containers/Wrapper.js","components/pages/InsertItem.js","components/pages/ErrorPage.js","components/containers/Body.js","App.js","serviceWorker.js","index.js"],"names":["history","createBrowserHistory","LightTheme","id","light","backgroundColor","primaryColor","secondaryColor","ThemeSwitcherGradient","BreakPoints","xs","sm","md","lg","RespondTo","Object","keys","reduce","accumulator","label","css","GlobalStyle","createGlobalStyle","props","theme","Wrapper","className","this","width","children","React","Component","InsertItem","Error","Body","styled","div","attrs","App","state","path","render","exact","component","ErrorPage","Boolean","window","location","hostname","match","ReactDOM","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uOAIeA,EAFCC,c,OCODC,EATI,CACjBC,GAAI,QACJC,OAAO,EACPC,gBAAiB,UACjBC,aAAc,UACdC,eAAgB,SAChBC,sBAAuB,qC,OCNZC,EAAc,CAC1BC,GAAI,QACJC,GAAI,QACJC,GAAI,QACJC,GAAI,U,2HCDE,IAAMC,EAAYC,OAAOC,KAAKP,GAAaQ,QAAO,SAACC,EAAaC,GAMtE,OALAD,EAAYC,GAAS,kBAAaC,YAAZ,IACAX,EAAYU,GAC9BC,IAAG,WAAH,eAGGF,IACL,I,soCCPI,IAAMG,EAAcC,YAAH,KAIN,SAAAC,GAAK,OAAIA,EAAMC,MAAMnB,mBAO1B,SAAAkB,GAAK,OAAIA,EAAMC,MAAMlB,eAmB5BQ,EAAUJ,GA9BQ,KAgClBI,EAAUH,GAhCQ,KAmClBG,EAAUF,GAnCQ,KAsClBE,EAAUD,GAtCQ,MCUTY,E,qKATJF,GACL,OACA,yBAAKG,UAAYC,KAAKJ,MAAMK,OACzBD,KAAKJ,MAAMM,c,GAJEC,IAAMC,WCYbC,E,uKATT,OACA,kBAAC,EAAD,CAASJ,MAAM,SAAf,Y,GAHmBE,IAAMC,WCShBE,E,uKATT,OACA,8C,GAHcH,IAAMC,W,kGCA1B,IAQeG,EARFC,IAAOC,IAAIC,MAAM,CAC5BX,UAAW,gBADAS,CAAH,KCqCKG,E,4MArBbC,MAAQ,CACNf,MAAOtB,G,uDAGP,OACE,yBAAKwB,UAAU,OACf,kBAAC,IAAD,CAAeF,MAAOG,KAAKY,MAAMf,OAC/B,wCACA,kBAAC,EAAD,KACA,kBAAC,IAAD,CAAQxB,QAASA,GACb,kBAAC,IAAD,CAAOwC,KAAK,IAAIC,OAAS,SAAAlB,GAAK,OAAK,kBAAC,EAAD,OAAkBmB,OAAK,IAC1D,kBAAC,IAAD,CAAOC,UAAWC,MAGxB,kBAACvB,EAAD,Y,GAfYS,IAAMC,WCLJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAAST,OACP,kBAAC,IAAMU,WAAP,KACA,kBAAC,IAAD,CAAYC,SAAS,KACnB,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bab7418d.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nexport default history;\n","const LightTheme = {\n  id: 'light',\n  light: true,\n  backgroundColor: '#e2e2e2',\n  primaryColor: '#2f2f2f',\n  secondaryColor: 'orange',\n  ThemeSwitcherGradient: 'linear-gradient(#39598A, #79D7ED)'\n};\n\nexport default LightTheme;\n","export const BreakPoints = {\n\txs: '480px',\n\tsm: '768px',\n\tmd: '992px',\n\tlg: '1200px'\n};\n","import { css } from 'styled-components';\nimport { BreakPoints } from './BreakPoints';\n\nexport const RespondTo = Object.keys(BreakPoints).reduce((accumulator, label) => {\n\taccumulator[label] = (...args) => css`\n\t\t@media (min-width: ${BreakPoints[label]}) {\n\t\t\t${css(...args)};\n\t\t}\n\t`;\n\treturn accumulator;\n}, {});\n","import {createGlobalStyle}  from 'styled-components';\nimport { RespondTo } from './breakpoints/RespondTo';\n\nexport const GlobalStyle = createGlobalStyle`\n\n  body {\n    transition: all 0.3s linear;\n    background: ${props => props.theme.backgroundColor} !important;\n    margin: 10;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    color: ${props => props.theme.primaryColor};\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n\n  img {\n    max-width: 100%;\n  }\n\n  .content-bodyÂ {\n    padding-top: 4em;\n  }\n\n  .boxed {\n    margin: 0 auto;\n    width: 80%;\n    ${RespondTo.xs`\n    `}\n    ${RespondTo.sm`\n      text-align: center;\n    `}\n    ${RespondTo.md`\n      max-width: 900px;\n    `}\n    ${RespondTo.lg`\n      width: 70%;\n    `}\n  }\n\n  .fullWidth {\n    width: 100%;\n  }\n\n`;\n","import React from 'react';\n\n\nclass Wrapper extends React.Component {\n    render(props){\n      return (\n      <div className= {this.props.width} >\n        {this.props.children}\n      </div>\n      )\n    }\n};\n\nexport default Wrapper;\n","import React from 'react';\n\nimport Wrapper from '../containers/Wrapper'\n\nclass InsertItem extends React.Component {\n    render(){\n      return (\n      <Wrapper width=\"boxed\">\n      TEST\n      </Wrapper>\n      )\n    }\n};\n\n\nexport default InsertItem;\n","import React from 'react';\n\nclass Error extends React.Component {\n    render(){\n      return (\n      <div>\n      ERROR 404\n      </div>\n      )\n    }\n};\n\n\nexport default Error;\n","import styled from 'styled-components';\n\nconst Body = styled.div.attrs({\n  className: 'content-body'\n})`\n  margin:0;\n  padding:0;\n`;\n\n\nexport default Body;\n","import React from 'react';\n\nimport { Route, Switch, Link } from 'react-router-dom';\nimport history from './services/history';\n\nimport {ThemeProvider} from 'styled-components';\nimport LightTheme from './theme/light';\nimport DarkTheme from './theme/dark';\n\nimport styled from 'styled-components';\nimport { GlobalStyle } from './GlobalStyle';\n\nimport InsertItem from './components/pages/InsertItem';\nimport ErrorPage from './components/pages/ErrorPage';\n\nimport Body from './components/containers/Body';\n\nclass App extends React.Component  {\n  state = {\n    theme: LightTheme\n  };\n  render(){\n    return (\n      <div className=\"App\">\n      <ThemeProvider theme={this.state.theme}>\n        <h1>ToDo App</h1>\n        <Body>\n        <Switch history={history} >\n            <Route path=\"/\" render={ props => (<InsertItem />) } exact />\n            <Route component={ErrorPage} />\n        </Switch>\n        </Body>\n      <GlobalStyle />\n      </ThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n  <HashRouter basename=\"/\">\n    <App />\n  </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}